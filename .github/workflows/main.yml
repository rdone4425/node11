name: Download SubsCheck URLs

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:  # 允许手动触发

# 添加权限设置
permissions:
  contents: write  # 给予写入仓库内容的权限

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史记录，避免浅克隆问题
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Download files
        run: |
          python download-script.py

      - name: Check for changes
        id: git-check
        run: |
          # 同时添加 downloads 目录和 raw_urls.txt 文件
          git add downloads/
          git add raw_urls.txt
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "没有检测到文件变化，跳过提交"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "检测到文件变化，将进行提交"
          fi

      - name: Handle conflicts and commit
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 先获取最新更改但不合并
          git fetch origin ${GITHUB_REF#refs/heads/}
          
          # 使用策略选项来自动解决冲突，保留我们的更改
          git merge -X ours --no-commit origin/${GITHUB_REF#refs/heads/}
          
          # 重新添加我们的更改
          git add downloads/
          git add raw_urls.txt
          
          # 提交更改
          git commit -m "Update downloaded files [$(date +'%Y-%m-%d %H:%M:%S')]"
          
          # 推送更改
          git push origin ${GITHUB_REF#refs/heads/}
