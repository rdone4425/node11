# GitHub Sync Tool Configuration Example
# GitHub同步工具配置文件示例
#
# 复制此文件为 github-sync.conf 并根据需要修改配置

#==============================================================================
# GitHub全局配置
#==============================================================================

# GitHub用户名
GITHUB_USERNAME="your-username"

# GitHub个人访问令牌 (需要repo权限)
# 在 https://github.com/settings/tokens 创建
GITHUB_TOKEN="ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

#==============================================================================
# 监控配置
#==============================================================================

# 轮询间隔（秒）
POLL_INTERVAL=30

# 日志级别: DEBUG, INFO, WARN, ERROR
LOG_LEVEL="INFO"

#==============================================================================
# 同步路径配置
#==============================================================================

# 监控路径配置，每行一个路径
# 格式: 本地路径|GitHub仓库|分支|目标路径
# 
# 示例配置：
# 1. 同步OpenWrt配置文件到GitHub
# 2. 同步自定义脚本到另一个仓库
# 3. 同步网络配置到专门的配置仓库

SYNC_PATHS="
/etc/config|your-username/openwrt-config|main|config
/root/scripts|your-username/openwrt-scripts|main|scripts
/etc/firewall.user|your-username/openwrt-config|main|firewall
/etc/crontabs/root|your-username/openwrt-config|main|crontab
"

# 更多示例：
# /etc/dropbear|your-username/openwrt-config|main|ssh
# /etc/uhttpd|your-username/openwrt-config|main|web
# /etc/dnsmasq.conf|your-username/openwrt-config|main|dns
# /root/.profile|your-username/openwrt-config|main|profile

#==============================================================================
# 文件过滤配置
#==============================================================================

# 排除文件模式（用空格分隔）
# 支持shell通配符模式
EXCLUDE_PATTERNS="*.tmp *.log *.pid *.lock .git *.swp *~ .DS_Store"

#==============================================================================
# 高级选项
#==============================================================================

# 自动提交（true/false）
AUTO_COMMIT=true

# 提交消息模板
# %s 会被替换为文件的相对路径
COMMIT_MESSAGE_TEMPLATE="Auto sync from OpenWrt: %s"

# 最大文件大小（字节）
# 超过此大小的文件将被跳过
MAX_FILE_SIZE=1048576  # 1MB

# 最大日志文件大小（字节）
MAX_LOG_SIZE=1048576  # 1MB

#==============================================================================
# 网络配置
#==============================================================================

# HTTP超时时间（秒）
HTTP_TIMEOUT=30

# 重试次数
MAX_RETRIES=3

# 重试间隔（秒）
RETRY_INTERVAL=5

#==============================================================================
# 安全配置
#==============================================================================

# 是否验证SSL证书（true/false）
# 在某些嵌入式系统上可能需要设置为false
VERIFY_SSL=true

# 代理设置（可选）
# HTTP_PROXY="http://proxy.example.com:8080"
# HTTPS_PROXY="http://proxy.example.com:8080"

#==============================================================================
# 配置说明
#==============================================================================

# 1. GitHub令牌权限要求：
#    - repo: 完整的仓库访问权限
#    - 如果是私有仓库，确保令牌有相应权限
#
# 2. 同步路径格式说明：
#    - 本地路径: 要监控的本地文件或目录的绝对路径
#    - GitHub仓库: 格式为 "用户名/仓库名"
#    - 分支: 目标分支名称，通常是 "main" 或 "master"
#    - 目标路径: 在GitHub仓库中的目标路径，可以为空
#
# 3. 文件监控说明：
#    - 工具会递归监控指定目录下的所有文件
#    - 使用轮询方式检测文件变化（适合OpenWrt系统）
#    - 只有文件修改时间发生变化才会触发同步
#
# 4. 安全建议：
#    - 定期轮换GitHub令牌
#    - 使用最小权限原则配置令牌
#    - 不要在公共场所暴露配置文件
#    - 考虑使用私有仓库存储敏感配置
#
# 5. 性能优化：
#    - 根据网络状况调整轮询间隔
#    - 合理设置最大文件大小限制
#    - 使用排除模式避免同步不必要的文件
#
# 6. 故障排除：
#    - 检查网络连接和GitHub API访问
#    - 验证令牌权限和仓库访问权限
#    - 查看日志文件了解详细错误信息
#    - 使用 'test' 命令验证配置
